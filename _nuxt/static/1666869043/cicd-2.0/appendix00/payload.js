__NUXT_JSONP__("/cicd-2.0/appendix00", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP){return {data:[{document:{slug:"appendix00",description:Q,title:Q,position:200,category:"持續交付2.0：實務導向的DevOps",menuTitle:"Appendix 00",contributors:["spyua","changemyminds"],toc:[{id:H,depth:C,text:H},{id:I,depth:C,text:I},{id:R,depth:w,text:S},{id:T,depth:w,text:U},{id:V,depth:C,text:W},{id:X,depth:w,text:Y},{id:Z,depth:w,text:_},{id:$,depth:w,text:"Windows設置[官網說明]"},{id:aa,depth:w,text:"Linux設置[官網說明]"},{id:ab,depth:w,text:ac},{id:J,depth:w,text:J},{id:ad,depth:C,text:ae},{id:K,depth:w,text:K},{id:af,depth:w,text:ag},{id:ah,depth:w,text:ai},{id:aj,depth:C,text:ak},{id:L,depth:w,text:L},{id:al,depth:w,text:am},{id:an,depth:w,text:ao},{id:M,depth:w,text:M},{id:N,depth:C,text:N},{id:ap,depth:C,text:aq}],body:{type:"root",children:[{type:b,tag:D,props:{id:H},children:[{type:b,tag:e,props:{href:"#%E5%89%8D%E8%A8%80",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:H}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"此章節不屬於持續交付2.0書中內容，額外挪出的一個教學章節。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"CI\u002FCD目前在大部分會做頻繁整合與部屬的團隊都已在使用，因此在開發中在目前的趨勢中有一定的必要性。CI為持續整合，他的用意本質在於當既有程式碼或產品有任何異動時，可以在短時間內完成整合，並確保用作如預期。而CD為持續交付，注意英文中的D為Delivery而不是Deployment。用意在讓任何一個異動可以保有品質的盡快交給客戶，並能為此帶來對應的價值，此章節會手把手教學如何使用Gitlab來達到CI\u002FCD自動化。並透過CI\u002FCD將.Net Core專案部屬到部屬機上。"}]},{type:a,value:c},{type:b,tag:E,props:{},children:[{type:a,value:"\nCI\u002FCD精神在於做到快速整合並保有高品質且能交付客戶使用，重點在於精神大於自動化工具，因此每個專案與產品狀況團隊也會具有不同的計畫與交付流程。\n"}]},{type:a,value:c},{type:b,tag:D,props:{id:I},children:[{type:b,tag:e,props:{href:"#%E7%B0%A1%E6%98%93%E9%96%8B%E7%99%BC%E6%B5%81%E7%A8%8B",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:x,props:{id:R},children:[{type:b,tag:e,props:{href:"#%E4%B8%8D%E4%BD%BF%E7%94%A8cicd",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:S}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"一般簡易開發整合流程為"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step1. 開發"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step2. 建置"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step3. 測試"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step4. 部屬"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"如下圖所示，在沒有自動化整合平台下，基本上所有流程都須透過手動去完成。"}]},{type:a,value:c},{type:b,tag:d,props:{align:z},children:[{type:a,value:A},{type:b,tag:l,props:{src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F001.png",width:F},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{id:T},children:[{type:b,tag:e,props:{href:"#%E4%BD%BF%E7%94%A8cicd",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:U}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"如下圖所示，我們只需要寫好Script File，交付到Gitlab，並在Gitlab Server上做好設定，Server就會根據Script腳本所寫的指令(命令)，交付Runner Server作執行。在使用此自動化整合架構下，我們可透過Gitlab與Runner Server完成上述的步驟開發、建置、測試與整合，甚至是程式碼分析。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"一般CI會做建置測試與程式碼分析，而CD則是做部屬、整合測試與交付。在不同的應用場合下，設置會根據不同環境應用建立專屬CI與CD Runner服務。但此章節不會講到太複雜的情境，會以簡易的開發、建置、測試與部屬四個步驟帶過。"}]},{type:a,value:c},{type:b,tag:d,props:{align:z},children:[{type:a,value:A},{type:b,tag:l,props:{src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F002.png",width:F},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:E,props:{},children:[{type:a,value:"\n一般可做自動化整合的Git Server，都會需要一個代理伺服器(Runner Server)來幫忙執行Script。因此我們會需要一台機器做專門的Runner Server來服務Git Server。\n"}]},{type:a,value:c},{type:b,tag:D,props:{id:V},children:[{type:b,tag:e,props:{href:"#runner-server%E8%A8%AD%E5%AE%9A",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:W}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Runner Server須根據開發應用選擇不同的作業環境，例如若你的專案已.Net Framework為主。你想做自動化整合，你的Runner機台則就須選用Windows OS。若日可做跨平台的.Net Core，你則可以選擇Linux OS環境去架設Runner Server。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"因Runner Server會根據Script指令做建置與測試甚至是部屬，所以需安裝可執行相對應的CLI指令及SDK。如上述提到的.Net Core，若Runner Server要編譯.Net Core專案，則就需安裝相對應的SDK。若CD需透過SSH連至部屬機操作，則Runner Server則需具備SSH連線能力。簡單的說，開發環境可做的事情，大部分在Runner上也要都具有相同功能。"}]},{type:a,value:c},{type:b,tag:x,props:{id:X},children:[{type:b,tag:e,props:{href:"#gitlab-runner%E5%88%86%E9%A1%9E",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:Y}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Gitlab Runner設置有三種模式，如下"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Share Runner : 所有Group或專案可使用，不需自行架設Runner，免費版本兩千分鐘使用限制。"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Specific(Project) Runner : 特定需求使用，需自行架設Runner。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"003",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F003.png"},children:[]}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Group Runner : 同Group的Project可使用，需自行架設Runner。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:ar,src:as},children:[]}]},{type:a,value:c},{type:b,tag:x,props:{id:Z},children:[{type:b,tag:e,props:{href:"#%E5%AE%89%E8%A3%9Drunner%E8%A8%AD%E5%AE%9A",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:_}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"上述提到Runner設置有三種，此文章我們會以Group Runner設置為主，請先至以下路徑"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"YourGroup → Setting → CI\u002FCD → Runner (點選Expand)"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"展開後，請點選New group runner view的Take me there就會進入到Runners 設定頁面如下圖，"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:ar,src:as},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"你可以點選右上角的Register a group runner，並根據你要設置的平台，在Show runner installation and registration instructions 選項有詳細設置方式，如下圖"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"005",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F005.png"},children:[]}]},{type:a,value:c},{type:b,tag:x,props:{id:$},children:[{type:b,tag:e,props:{href:"#windows%E8%A8%AD%E7%BD%AE%E5%AE%98%E7%B6%B2%E8%AA%AA%E6%98%8E",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"Windows設置["},{type:b,tag:e,props:{href:at,rel:[s,t,u],target:v},children:[{type:a,value:au}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Step1 : "},{type:b,tag:e,props:{href:"https:\u002F\u002Fgitlab-runner-downloads.s3.amazonaws.com\u002Flatest\u002Fbinaries\u002Fgitlab-runner-windows-amd64.exe",rel:[s,t,u],target:v},children:[{type:a,value:"下載Windows Gitlab Runner檔案"}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Step2 : 安裝與啟動"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"# 切換到下載目錄\ncd D:\\SystemService\\gitlab-runner\n\n# 安裝服務\ngitlab-runner-windows-amd64.exe install\n\n# 進行服務啟動\ngitlab-runner-windows-amd64.exe start\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"安裝和啟動服務成功後，可以透過工具管理員查看狀態"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step3 : 註冊"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:av}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"點選Windows Tab 此時就會跑出建議指令流程，"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"006",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F006.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"請輸入Register指令"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:".\u002Fgitlab-runner.exe register --url https:\u002F\u002Fgitlab.com\u002F --registration-token your token\n"}]}]}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step4 : 設置Register參數\n"},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"a. Gitlab URL : 若是Group Runner，可以輸入Group Gitlab的URL(Ex:"},{type:b,tag:e,props:{href:aw,rel:[s,t,u],target:v},children:[{type:a,value:aw}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"b. Registration Token : Your Token (Group Token or Specific Project Token)"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"c. Description : 關於此Runner的描述"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"d. Tags : 寫CI.yml時，工作會根據Tag名稱指向符合此名稱的Runner，所以這參數設定很重要，一般可以根據你的環境去命名例如Windows-xxxx或者是Linux-xxxx"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"e. Maintenance note : 維護說明，可填寫維護時須注意事項"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"f. Executor : 執行器種類，若要走較一般的CI就是選shell，執行器就可根據不同作業系統做對應的CLI執行器設定(例如Windows設定PowerShell，Linux設定bash。"},{type:b,tag:e,props:{href:ax,rel:[s,t,u],target:v},children:[{type:a,value:"參考"}]},{type:a,value:G}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step5 : 完成"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"此時我們在點選"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"YourGroup → Setting → CI\u002FCD → Runner (點選Expand) → Take me there"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"你就可以看到註冊好的Runner顯示在設定頁面上了"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"007",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F007.png"},children:[]}]},{type:a,value:c},{type:b,tag:x,props:{id:aa},children:[{type:b,tag:e,props:{href:"#linux%E8%A8%AD%E7%BD%AE%E5%AE%98%E7%B6%B2%E8%AA%AA%E6%98%8E",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"Linux設置["},{type:b,tag:e,props:{href:at,rel:[s,t,u],target:v},children:[{type:a,value:au}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step 1 : 安裝與啟動"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"至Gitlab說明文件直接照步驟操刀"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:av}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"008",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F008.png"},children:[]}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Step 2 : 註冊 (可直接參照上述 Windows設置註冊)"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{id:ab},children:[{type:b,tag:e,props:{href:"#shell%E8%A8%AD%E7%BD%AE",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:ac}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"上述設置好Ruuner後，接著需調整Runner設定檔的執行器，請開啟Runner資料夾下的toml檔，並照下圖設置"}]},{type:a,value:c},{type:b,tag:d,props:{align:z},children:[{type:a,value:A},{type:b,tag:l,props:{src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F009.png",width:"70%"},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"詳細對應Shell設定可至此查詢["},{type:b,tag:e,props:{href:ax,rel:[s,t,u],target:v},children:[{type:a,value:"連結請點我"}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:x,props:{id:J},children:[{type:b,tag:e,props:{href:"#%E5%AE%89%E8%A3%9D%E7%B7%A8%E8%AD%AF%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:J}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"因為Runner為代替本機電腦做建置、測試與部屬。所以需在上面安裝相對應環境，專案上我們會使用dotnet core為範例。所以電腦需安裝對應需有的SDK，若使用Docker則需安裝Docker環境。"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Fdocs.microsoft.com\u002Fzh-tw\u002Fdotnet\u002Fcore\u002Finstall\u002Fwindows?tabs=net60",rel:[s,t,u],target:v},children:[{type:a,value:"Net Core SDK安裝參考"}]}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002Fchangemyminds\u002Fscript\u002Ftree\u002Fmaster\u002Fdocker\u002Finstall",rel:[s,t,u],target:v},children:[{type:a,value:"Dokcer安裝參考"}]},{type:a,value:" 好用請給讚，謝謝"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:D,props:{id:ad},children:[{type:b,tag:e,props:{href:"#ci%E6%92%B0%E5%AF%AB",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:ae}]},{type:a,value:c},{type:b,tag:x,props:{id:K},children:[{type:b,tag:e,props:{href:"#%E5%BB%BA%E7%BD%AE%E8%88%87%E6%B8%AC%E8%A9%A6",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:K}]},{type:a,value:c},{type:b,tag:x,props:{id:af},children:[{type:b,tag:e,props:{href:"#hello-cicd",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:ag}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"請到此下載Sample Code"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:ay,rel:[s,t,u],target:v},children:[{type:a,value:ay}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"下載下來後將此專案上到你的Group Project，若你的Runner已設好，我們可以直接從Gitlab頁面點選 Set up CI\u002FC，如下圖"}]},{type:a,value:c},{type:b,tag:d,props:{align:z},children:[{type:a,value:A},{type:b,tag:l,props:{src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F010.png",width:az},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著點選Configure pipeline，此時Gitlab會幫你生成yml Sample Code，此Sample Code已幫你寫好的基本build, test與deploy Stages。請將最上層註解刪除，並加上default區段，runner tag"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"# default表示所有job都會參考以及使用\ndefault:\n  # 使用Gitlab Runner有相關的標籤\n  tags:\n    - Windows(根據你的Runner Tag去填寫)\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"此時若Runner設置無誤，就可以看到Gitlab開始跑CI\u002FCD，如下圖"}]},{type:a,value:c},{type:b,tag:d,props:{align:z},children:[{type:a,value:A},{type:b,tag:l,props:{src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F011.png",width:az},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"根據此腳本，我們可以得知CI.yml的基本語法由stages及對應的job name中的script。若要新增Job則只需在stages新增，例如我們在test站點後新增build-release，請修改stage區塊如下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"stages:          # List of stages for jobs, and their order of execution\n  - build\n  - test\n  - build-release # 新增build-release\n  - deploy\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"並將以下Script放置lint-test-job下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"lint-test-job:   # This job also runs in the test stage.\n  stage: test    # It can run at the same time as unit-test-job (in parallel).\n  script:\n    - echo \"Linting code... This will take about 10 seconds.\"\n    - sleep 10\n    - echo \"No lint issues found.\"\n\n#新增build-release job\nbuild-release-job:\n  stage: build-release\n  script:\n    - echo \"Build release app package...\"\n    - echo \"Build complete.\"\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著做commit，我們即可看到Pipeline由三個站點變成四個站點"}]},{type:a,value:c},{type:b,tag:d,props:{align:z},children:[{type:a,value:A},{type:b,tag:l,props:{src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F012.png",width:F},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{id:ah},children:[{type:b,tag:e,props:{href:"#build-%E8%88%87-test",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:ai}]},{type:a,value:c},{type:b,tag:B,props:{id:aA},children:[{type:b,tag:e,props:{href:"#build-job",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:aA}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"一般在CI\u002FCD Sample，很常會看到這個站點，用意在測試建置專案是否能編譯過。在dotnet core專案，我們在CLI模式下可以用dotnet build去建置專案，此時我們可以嘗試將build-job站點script加入dotnet build指令(建議先註解調build job以外的job Script站別)，如下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"build-job:       # This job runs in the build stage, which runs first.\n  stage: build\n  script:\n    - echo \"Compiling the code...\"\n    - dotnet build SampleWebAPI\\src\\SampleWebAPI -c debug\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:aB}]},{type:a,value:c},{type:b,tag:d,props:{align:z},children:[{type:a,value:A},{type:b,tag:l,props:{src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F013.png",width:F},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:B,props:{id:aC},children:[{type:b,tag:e,props:{href:"#unit-test-job",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:aC}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著我們嘗試加入Test Job，請刪除lint-test-job只保留unit-test-job並將dotnet test加入script，如下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"unit-test-job:   # This job runs in the test stage.\n  stage: test    # It only starts when the job in the build stage completes successfully.\n  script:\n    - echo \"Running unit tests... This will take about 60 seconds.\"\n    - dotnet test SampleWebAPI\\test\\SampleWebAPI.Test\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:aB}]},{type:a,value:c},{type:b,tag:d,props:{align:z},children:[{type:a,value:A},{type:b,tag:l,props:{src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F014.png",width:F},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:B,props:{id:aD},children:[{type:b,tag:e,props:{href:"#%E4%BD%BF%E7%94%A8%E8%AE%8A%E6%95%B8",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:aD}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"上述編譯與測試有使用到dotnet build與test，基本上我們可以將我們的src與test路徑寫成變數，這樣在使用上可以重複利用減少重複的程式碼"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"variables:\n  AppFolderPath: SampleWebAPI\\\\src\\\\SampleWebAPI\n  TestFolderPath: SampleWebAPI\\\\test\\\\SampleWebAPI.Test\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著將原本的Build與Test Jib Script換掉"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"build-job:       # This job runs in the build stage, which runs first.\n  stage: build\n  script:\n    - echo \"Compiling the code...\"\n    - dotnet build ${AppFolderPath} -c debug\n\nunit-test-job:   # This job runs in the test stage.\n  stage: test    # It only starts when the job in the build stage completes successfully.\n  script:\n    - echo \"Running unit tests... This will take about 60 seconds.\"\n    - dotnet test ${TestFolderPath}\n"}]}]}]},{type:a,value:c},{type:b,tag:E,props:{},children:[{type:a,value:"\n因為我們使用dot net core，如果我們有寫測試Code，我們可以直接省略測試建置這個站點(build-job)。只需要做Test即可(unit-test-job)。下dot net test時，因為要跑測試，他會順便建置App專案。\n"}]},{type:a,value:c},{type:b,tag:D,props:{id:aj},children:[{type:b,tag:e,props:{href:"#cd%E6%92%B0%E5%AF%AB",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:ak}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著我們要做簡易的Release建置與部屬，因為Windows權限設置較麻煩，這部分Demo我們使用Linux Runner去實現(Windows系統若要快速啟用Linux Runner，可以使用WSL2)。請啟用Linux Runner並在Runner上設置好.net core需要編譯的SDK安裝，另外則是SSH安裝。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Runner設置好後，我們將上述提到的default區塊使用到的tags設定，由Windows改成Linux(在此可根據你的Linux設置)。接著將上述寫好的腳本將斜線改成反斜線，參考Script如下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"# default表示所有job都會參考以及使用\ndefault:\n  # 使用Gitlab Runner有相關的標籤\n  tags:\n    - Linux\n\nvariables:\n  AppFolderPath: SampleWebAPI\u002F\u002Fsrc\u002F\u002FSampleWebAPI\n  TestFolderPath: SampleWebAPI\u002F\u002Ftest\u002F\u002FSampleWebAPI.Test\n\nstages:          # List of stages for jobs, and their order of execution\n  - test\n\nunit-test-job:   # This job runs in the test stage.\n  stage: test    # It only starts when the job in the build stage completes successfully.\n  script:\n    - echo \"Running unit tests... This will take about 60 seconds.\"\n    - dotnet test ${TestFolderPath}\n\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"若已確定你的Pipeline無誤，接著就可以往下走測試Release建置與部屬"}]},{type:a,value:c},{type:b,tag:x,props:{id:L},children:[{type:b,tag:e,props:{href:"#%E5%BB%BA%E7%BD%AE%E8%88%87%E9%83%A8%E5%B1%AC",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:L}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"在建置部屬之前，請先準備好你的部屬Server，目前此章節用的部屬Server為Ubuntu 20.04 Linux，並已安裝好"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:".Net Core 3.1 SDK"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"SSH"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Docker"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"pm2"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"unzip"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:x,props:{id:al},children:[{type:b,tag:e,props:{href:"#ssh%E8%A8%AD%E5%AE%9A",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:am}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"為了簡易Demo，連線部分我們直接使用ssh與部屬Server溝通，為了免登入密碼，故須設置ssh私鑰與公鑰。請至你的Linux Runner資料夾底下會有一個.ssh file。若你是照Gitlab上的步驟設置，沒意外你的Runner路徑會在home底下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"# 切換sudo\nsudo -i\n\n# 切換到ssh目錄下\ncd \u002Fhome\u002Fgitlab-runner\u002F.ssh\n\n#產生金鑰匙(方便測試可全按Enter)\nssh-keygen\n\n#更改私鑰權限為600\nchmod 600 id_rsa\n\n# 接著將你的公鑰傳至你的部屬機上\nscp id_dsa.pub user@abc.xxx.xxx.xxx:\u002Froot\u002F.ssh\u002Fid_dsa.pub\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著連過去部屬機"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"# 連線部屬機\nssh root@abc.xxx.xxx.xxx\n\n# 輸入密碼\n\n# 至SSH File底下將Key複製一分到authorized_keys檔案底下\ncat id_rsa.pub \u003E authorized_keys\n\n# 確定authorized_keys權限為600\nchmod 600 authorized_keys\n\n# 登出\nexit\n\n# 再次登入確定是否免密碼\nssh root@abc.xxx.xxx.xxx\n\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"比較笨的方式，你也可以手動複製將你自己Runner下的私鑰手動複製到部屬機的authorized_keys檔案"}]},{type:a,value:c},{type:b,tag:x,props:{id:an},children:[{type:b,tag:e,props:{href:"#project-ssh-key%E8%AE%8A%E6%95%B8",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:ao}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"確定好Runner與部屬機之間已可免密碼連線後，我們需要在將Runner的私鑰複製一份至專案的CI\u002FCD設定下"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"請至你Group"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"YourPorject Repo\u002FSettings\u002FCICD 下"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"此時你會看到Variables，請新增一SSH_PRIVATE_KEY變數如下"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"015",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F015.png"},children:[]}]},{type:a,value:c},{type:b,tag:E,props:{},children:[{type:a,value:"\n須注意!因為是Group Runner，所以一開始我只將SSH PK設置在Group Setting的CICD設置變數下。結果Project上tags觸發Pipeline在部屬時找不到SSH PK。所以Project Repo若要上tags，須將SSH PK設置在Project Repo Setting的CICD變數設定下。\n"}]},{type:a,value:c},{type:b,tag:x,props:{id:M},children:[{type:b,tag:e,props:{href:"#build-release-job%E8%88%87deploy",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:M}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"部屬機等環境設置好後，接下來就開始寫Release與deploy。先簡單帶artifacts版本，然後連至部屬主機將artifacts載下來後，解壓縮直接透過pm2將web api服務啟起來。"}]},{type:a,value:c},{type:b,tag:B,props:{id:aE},children:[{type:b,tag:e,props:{href:"#build-release-job",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:aE}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"為了減少測試時間。我們可以先嘗試使用dotnet publish指令，自己先試看看有無問題，無問題通常可以直接將指令複製到script上。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"建置release stage，參考script如下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"default:\n  tags:\n    - Linux\n\nvariables:\n  AppFolderPath: SampleWebAPI\u002F\u002Fsrc\u002F\u002FSampleWebAPI\n  TestFolderPath: SampleWebAPI\u002F\u002Ftest\u002F\u002FSampleWebAPI.Test\n\nstages:          \n  - test\n  # 建置release stage\n  - release\n\nunit-test-job:  \n  stage: test\n  script:\n    - echo \"Running unit tests... This will take about 60 seconds.\"\n    - dotnet test ${TestFolderPath}\n\n# 建置release stage\nbuild-release-job:\n  stage: release\n  script:\n    - echo \"Build release...\"\n    - dotnet publish ${AppFolderPath} -c release\n"}]}]}]},{type:a,value:c},{type:b,tag:B,props:{id:aF},children:[{type:b,tag:e,props:{href:"#%E5%BB%BA%E7%BD%AEartifacts",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:aF}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著我們希望在release job完成後同步產生artifacts。參考script如下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"build-release-job:\n  stage: release\n  script:\n    - echo \"Build release...\"\n    - dotnet publish ${AppFolderPath} -c release\n  artifacts:\n    # on_success always on_failure\n    when: always \n    # 30 mins, 1 weeks...\n    expire_in: 30 mins\n    paths:\n      - .\u002FSampleWebAPI\u002Fsrc\u002FSampleWebAPI\u002Fbin\u002Frelease\u002Fnetcoreapp3.1\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"我們將artifacts寫至build-release-job下，這邊會有幾個設定"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"when : upload articacts時機 ("},{type:b,tag:e,props:{href:"https:\u002F\u002Fdocs.gitlab.com\u002Fee\u002Fci\u002Fyaml\u002F#artifactswhen",rel:[s,t,u],target:v},children:[{type:a,value:P}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"expire : articats 存活時間 ("},{type:b,tag:e,props:{href:"https:\u002F\u002Fdocs.gitlab.com\u002Fee\u002Fci\u002Fyaml\u002F#artifactsexclude",rel:[s,t,u],target:v},children:[{type:a,value:P}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"paths: 要包裝檔案的路徑"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"此時我們在跑一次Pipeline，就可以看到build-release-job下有個可下載的介面(如下圖)，代表你的artifactst產生成功。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"016",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F016.png"},children:[]}]},{type:a,value:c},{type:b,tag:B,props:{id:"artifacts-url測試參考點我"},children:[{type:b,tag:e,props:{href:"#artifacts-url%E6%B8%AC%E8%A9%A6%E5%8F%83%E8%80%83%E9%BB%9E%E6%88%91",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"artifacts url測試("},{type:b,tag:e,props:{href:"https:\u002F\u002Fdocs.gitlab.com\u002Fee\u002Fci\u002Fpipelines\u002Fjob_artifacts.html#access-the-latest-job-artifacts-by-url",rel:[s,t,u],target:v},children:[{type:a,value:P}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著我們可以透過url下載artifacts，Sample如下"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:aG,rel:[s,t,u],target:v},children:[{type:a,value:aG}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"可修改的部分"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"test8214 : 你的Group Url"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"testproject : Project Repository Name"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"main:表示主線"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"release-job:表示你的stage job"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:aH,props:{color:aI},children:[{type:a,value:aJ}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"所以此url的意思為要從testproject下main主線最後一個成功Pipeline的build-release-job下載artifacts。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"另外，比較好的方法是用CI_JOB_TOKEN去打Job Artifacts API拿取Artifacts，參考如\n連結"},{type:b,tag:e,props:{href:aK,rel:[s,t,u],target:v},children:[{type:a,value:aK}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"因為url方式是拿取最後一個Pipeline的build-release-job產物，代表他會拿取前一個成功的Pipline產物不是當下運行Pipeline的build-release-job產物。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"因為這樣，所以這個Demo就不會將build-release-job上only tags。讓deploy可以正確拿取目前運行Pipeline編譯好的程式碼如下。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"017",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F017.png"},children:[]}]},{type:a,value:c},{type:b,tag:E,props:{},children:[{type:a,value:"\n較好的Pepeline設計是將release設置在tag觸發時，也就是做CD時機點。後續再找時間修正artifacts下載方式\n"}]},{type:a,value:c},{type:b,tag:B,props:{id:aL},children:[{type:b,tag:e,props:{href:"#deploy",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:aL}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"在build-release-job做完後，接著我們要做deploy stage，一開始我們須建立ssh連線，腳本指令如下"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"deploy-job:\n  stage: deploy\n  script:\n    - eval $(ssh-agent -s)\n    - echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add -     \n    - mkdir -p ~\u002F.ssh     \n    - chmod 700 ~\u002F.ssh \n    -\u003E \n      ssh -o StrictHostKeyChecking=no -v user@125.229.14.65 -p 40122\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"這部分會稍微難了解一點，整體來說，主要目的在於建立一個具有PK權限的連線，讓Gitlab Runner可以在不同已允許權限的部屬主機連線(也許不只一台)。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"細節部分，ssh-agent有點像是管理ssh key的工具。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第一行eval通常是印出來的意思，有點類似 echo，不過他可以直接把指令顯示出來，所以此處為顯示ssh-agent的狀態。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第二行是把 gitlab的環境變數讀取出來，之後 tr -d  '\\r' 主要是把換行給取代掉，windows內建是CRLF 相當於 \u002Fr\u002Fn，而這邊的 \u002Fr 就是Carriage-Return，所謂的迴車字元。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第三行創建 -\u002F.ssh 是在目前使用者目錄底下創建 .ssh，用來記錄等一下你的ssh連線資訊，通常ssh連線後，會記錄在一個叫做 known_host的檔案。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"寫好連線deploy-job後，我們可以嘗試讓他跑看看能否連線部屬主機成功，"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"default:\n  tags:\n    - Linux\n\nvariables:\n  AppFolderPath: SampleWebAPI\u002F\u002Fsrc\u002F\u002FSampleWebAPI\n  TestFolderPath: SampleWebAPI\u002F\u002Ftest\u002F\u002FSampleWebAPI.Test\n\nstages:          \n  - test\n  - release\n  # 部屬\n  - deploy\n\nunit-test-job:  \n  stage: test\n  script:\n    - echo \"Running unit tests... This will take about 60 seconds.\"\n    - dotnet test ${TestFolderPath}\n\n\nbuild-release-job:\n  stage: release\n  script:\n    - echo \"Build release...\"\n    - dotnet publish ${AppFolderPath} -c release\n  artifacts:\n    # on_success always on_failure\n    when: always \n    # 30 mins, 1 weeks...\n    expire_in: 30 mins\n    paths:\n      - .\u002FSampleWebAPI\u002Fsrc\u002FSampleWebAPI\u002Fbin\u002Frelease\u002Fnetcoreapp3.1\n# 部屬      \ndeploy-job:\n  stage: deploy\n  script:\n    - eval $(ssh-agent -s)\n    - echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add -     \n    - mkdir -p ~\u002F.ssh     \n    - chmod 700 ~\u002F.ssh \n    -\u003E \n      ssh -o StrictHostKeyChecking=no -v user@125.229.14.65 -p 40122\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"若連線成功，deploy stage則會運行通過(打勾勾)，接著就可以開始寫連至部屬Server的指令了。這邊可以看到有一個-\u003E的符號，代表此符號區段下的指令是在SSH目標主機上執行。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著連過去後，我們加入要執行的Script指令"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"# 部屬      \ndeploy-job:\n  stage: deploy\n  script:\n    - eval $(ssh-agent -s)\n    - echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add -     \n    - mkdir -p ~\u002F.ssh     \n    - chmod 700 ~\u002F.ssh \n    - \u003E\n      ssh -o StrictHostKeyChecking=no -v user@125.229.14.65 -p 40122\n      \"mkdir -p ~\u002Fsampleapi &&\n       wget -O ~\u002Fsampleapi\u002Frelease-build.zip https:\u002F\u002Fgitlab.com\u002Ftest8214\u002Ftestproject\u002F-\u002Fjobs\u002Fartifacts\u002Fmain\u002Fdownload?job=build-release-job &&\n       sudo unzip -o ~\u002Fsampleapi\u002Frelease-build.zip -d ~\u002Fsampleapi &&\n       pm2 start 'dotnet ~\u002Fsampleapi\u002FSampleWebAPI\u002Fsrc\u002FSampleWebAPI\u002Fbin\u002Frelease\u002Fnetcoreapp3.1\u002FSampleWebAPI.dll --urls http:\u002F\u002F0.0.0.0:5000' --name 'code-sense-api-service' &&\n       pm2 delete code-sense-api-service &&\n       pm2 start 'dotnet ~\u002Fsampleapi\u002FSampleWebAPI\u002Fsrc\u002FSampleWebAPI\u002Fbin\u002Frelease\u002Fnetcoreapp3.1\u002FSampleWebAPI.dll --urls http:\u002F\u002F0.0.0.0:5000' --name 'code-sense-api-service'\n      \"\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"指令內容大致是連至目標主機後，"}]},{type:a,value:c},{type:b,tag:y,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"在user下建置sampleapi資料夾"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"下載artifacts"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"解壓鎖"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"使用pm2將Service Run起來"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:aH,props:{color:aI},children:[{type:a,value:aJ}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"018",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F018.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"deploy完後此時就可以透過API，得到資料"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:"http:\u002F\u002Fx.x.x.x\u002F%E4%BD%A0%E7%9A%84%E5%B0%8D%E5%A4%96Port\u002Fweatherforecast",rel:[s,t,u],target:v},children:[{type:a,value:"http:\u002F\u002Fx.x.x.x:你的對外Port\u002Fweatherforecast"}]}]},{type:a,value:c},{type:b,tag:E,props:{},children:[{type:a,value:"\ndeploy可以看到pm2 start兩次，因為在第一次加入時沒有對應service name可以刪除會出錯。使用\u003E \u002Fdev\u002Fnull 測試沒用。只能先用此法暫解。章節目的還是在於如何建立一起一條簡易的CI\u002FCD Pipeline為注。正式複雜的場合可以參考Docker版本\n"}]},{type:a,value:c},{type:b,tag:B,props:{id:"only-tags"},children:[{type:b,tag:e,props:{href:"#only-tags",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"only tags"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接著我們要在deploy上tags觸發事件(上標籤)，只需要在原本的script下，多一個tags屬性"}]},{type:a,value:c},{type:b,tag:m,props:{className:[n]},children:[{type:b,tag:o,props:{className:[p,q]},children:[{type:b,tag:r,props:{},children:[{type:a,value:"# 部屬      \ndeploy-job:\n  stage: deploy\n  script:\n    - eval $(ssh-agent -s)\n    - echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add -     \n    - mkdir -p ~\u002F.ssh     \n    - chmod 700 ~\u002F.ssh \n    - \u003E\n      ssh -o StrictHostKeyChecking=no -v user@125.229.14.65 -p 40122\n      \"mkdir -p ~\u002Fsampleapi &&\n       wget -O ~\u002Fsampleapi\u002Frelease-build.zip https:\u002F\u002Fgitlab.com\u002Ftest8214\u002Ftestproject\u002F-\u002Fjobs\u002Fartifacts\u002Fmain\u002Fdownload?job=build-release-job &&\n       sudo unzip -o ~\u002Fsampleapi\u002Frelease-build.zip -d ~\u002Fsampleapi &&\n       pm2 start 'dotnet ~\u002Fsampleapi\u002FSampleWebAPI\u002Fsrc\u002FSampleWebAPI\u002Fbin\u002Frelease\u002Fnetcoreapp3.1\u002FSampleWebAPI.dll --urls http:\u002F\u002F0.0.0.0:5000' --name 'code-sense-api-service' &&\n       pm2 delete code-sense-api-service &&\n       pm2 start 'dotnet ~\u002Fsampleapi\u002FSampleWebAPI\u002Fsrc\u002FSampleWebAPI\u002Fbin\u002Frelease\u002Fnetcoreapp3.1\u002FSampleWebAPI.dll --urls http:\u002F\u002F0.0.0.0:5000' --name 'code-sense-api-service'\n      \"\n  # 上tags觸發事件\n  only:\n    - tags\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"上完tags後，deploy事件則只會在你上tag時觸發。接著就可以在tag頁面看到此次的release tag是否有通過Pipeline Job。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:l,props:{alt:"019",src:"\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F019.png"},children:[]}]},{type:a,value:c},{type:b,tag:E,props:{},children:[{type:a,value:"\n一般CD做release build與deploy都會上only tags，此範例因為artifacts還不確定是不是已正確方式拿取，所以只在deploy上only tags。\n"}]},{type:a,value:c},{type:b,tag:D,props:{id:N},children:[{type:b,tag:e,props:{href:"#%E5%8F%83%E8%80%83%E5%B0%88%E6%A1%88",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:N}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:aM},{type:b,tag:e,props:{href:aN,rel:[s,t,u],target:v},children:[{type:a,value:aN}]}]},{type:a,value:c},{type:b,tag:D,props:{id:ap},children:[{type:b,tag:e,props:{href:"#docker%E7%89%88%E6%9C%ACspeak%E5%BE%8C%E7%BA%8C%E5%BE%85%E5%AF%AB",ariaHidden:g,tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:aq}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:aM},{type:b,tag:e,props:{href:aO,rel:[s,t,u],target:v},children:[{type:a,value:aO}]}]}]},dir:"\u002Fzh\u002Fcicd-2.0",path:"\u002Fzh\u002Fcicd-2.0\u002Fappendix00",extension:".md",createdAt:aP,updatedAt:aP,readingStats:{text:"24 min read",minutes:23.62,time:1417200,words:4724},to:"\u002Fcicd-2.0\u002Fappendix00"},prev:{title:"Chapter 16 研發推動的DevOps",path:"\u002Fzh\u002Fcicd-2.0\u002Fchapter16",to:"\u002Fcicd-2.0\u002Fchapter16"},next:{title:"Appendix 01 Database Version Control",path:"\u002Fzh\u002Fcicd-2.0\u002Fappendix01",to:"\u002Fcicd-2.0\u002Fappendix01"}}],fetch:{},mutations:[]}}("text","element","\n","p","a","li","true",-1,"span","icon","icon-link","img","div","nuxt-content-highlight","pre","language-text","line-numbers","code","nofollow","noopener","noreferrer","_blank",3,"h3","ul","center","\n  ","h4",2,"h2","alert","100%",")","前言","簡易開發流程","安裝編譯環境設定","建置與測試","建置與部屬","build-release-job與deploy","參考專案","]","參考點我","Appendix 00 使用Gitlab做CI\u002FCD","不使用cicd","不使用CI\u002FCD","使用cicd","使用CI\u002FCD","runner-server設定","Runner Server設定","gitlab-runner分類","Gitlab Runner分類","安裝runner設定","安裝Runner設定","windows設置官網說明","linux設置官網說明","shell設置","Shell設置","ci撰寫","CI撰寫","hello-cicd","Hello CI\u002FCD","build-與-test","build 與 test","cd撰寫","CD撰寫","ssh設定","SSH設定","project-ssh-key變數","Project SSH Key變數","docker版本speak後續待寫","Docker版本(Speak，後續待寫)","004","\u002Fcode-study\u002Fimages\u002Fcicd-2.0\u002Fa00\u002F004.png","https:\u002F\u002Fdocs.gitlab.com\u002Frunner\u002Finstall\u002F","官網說明","至YourGroup → Setting → CI\u002FCD → Runner (點選Expand) → Take me there → Register group runner →Show runner installation and registration instructions","https:\u002F\u002Fgitlab.com\u002Fgroupxxxx","https:\u002F\u002Fdocs.gitlab.com\u002Frunner\u002Fshells\u002F","https:\u002F\u002Fgitlab.com\u002Ftest8214\u002Femptyproject","90%","build-job","更新yml file後，檢查一下Pipeline能否編輯的過。編譯過可看到訊息如下","unit-test-job","使用變數","build-release-job","建置artifacts","https:\u002F\u002Fgitlab.com\u002Ftest8214\u002Ftestproject\u002F-\u002Fjobs\u002Fartifacts\u002Fmain\u002Fdownload?job=build-release-job","font","#dd0000","\n artifacts Project URL請根據你實際的 Project URL設定調整，誤直接照抄\n","https:\u002F\u002Fdocs.gitlab.com\u002Fee\u002Fapi\u002Fjob_artifacts.html","deploy","Repository:","https:\u002F\u002Fgitlab.com\u002Ftest8214\u002Ftestproject","https:\u002F\u002Fgitlab.com\u002Ftest8214\u002Fdemoproject","2022-10-27T11:09:27.051Z")));