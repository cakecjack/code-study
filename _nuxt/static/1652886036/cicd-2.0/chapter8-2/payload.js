__NUXT_JSONP__("/cicd-2.0/chapter8-2", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W){return {data:[{document:{slug:"chapter8-2",description:y,title:y,position:103,category:"持續交付2.0：實務導向的DevOps",menuTitle:"Chapter 08-B",toc:[{id:z,depth:p,text:A},{id:B,depth:p,text:C},{id:D,depth:p,text:E},{id:F,depth:p,text:G},{id:H,depth:p,text:I},{id:J,depth:p,text:K},{id:L,depth:M,text:N},{id:O,depth:M,text:P}],body:{type:"root",children:[{type:b,tag:s,props:{id:Q},children:[{type:b,tag:f,props:{href:"#%E5%88%86%E6%94%AF%E7%AD%96%E7%95%A5",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:Q}]},{type:a,value:c},{type:b,tag:s,props:{id:"83-分支模式的演化"},children:[{type:b,tag:f,props:{href:"#83-%E5%88%86%E6%94%AF%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%BC%94%E5%8C%96",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:"8.3 分支模式的演化"}]},{type:a,value:c},{type:b,tag:q,props:{id:z},children:[{type:b,tag:f,props:{href:"#831-%E4%B8%89%E9%A7%95%E9%A6%AC%E8%BB%8A%E5%88%86%E6%94%AF%E6%A8%A1%E5%BC%8F",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Chrome 瀏覽器於 2010 年使用此分支模式"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"8-13",src:"images\u002Fcicd-2.0\u002F08\u002F8-13.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"開發 Branch 擁有足夠多的新功能 (或者準備 Release 時), 將該 Branch 使用 "},{type:b,tag:g,props:{},children:[{type:a,value:"Cherry Pick"}]},{type:a,value:" 撿到 Pre-Release 分支上"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Pre-Release"}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"BugFix"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Document"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Deployment"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:R}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Pre-Release 達到 Alpha 等級後 → 發布Alpha 版本 (給予極少部分使用者先行體驗) → Beta 版本 (給予嘗鮮用戶進行體驗) → 收集存在的質量與 Bug 問題與修正  → Beta 版本穩定 → 合併至 Release 分支 → RC 版本 → RC 版本穩定 → 正式版本"}]},{type:a,value:c},{type:b,tag:q,props:{id:B},children:[{type:b,tag:f,props:{href:"#832--gitflow",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:g,props:{},children:[{type:a,value:"Master"}]},{type:a,value:" (Main) 分支是正式版本的發布分支"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:g,props:{},children:[{type:a,value:"Release"}]},{type:a,value:" 分支用於品質打磨的預發布分支，如果 Release 的品質達標，將 Release 合併至 Main 分支與 Development 分支"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:g,props:{},children:[{type:a,value:"Development"}]},{type:a,value:" 分支為 Feature 新功能整合的分支"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:g,props:{},children:[{type:a,value:R}]},{type:a,value:" 分支是為了新的功能，開發人員從 Development分支上 Checkout 出來的分支。當 Feature 開發完後，合入 Development 分支。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"8-14",src:"images\u002Fcicd-2.0\u002F08\u002F8-14.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Gitflow 為特性分支模式與三駕馬車分支模式的組合"}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"優點: 分支定義明確"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"缺點: 分支較多，具有特性分支的不足"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:q,props:{id:D},children:[{type:b,tag:f,props:{href:"#833-githubflow",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"名稱來自 GitHub 團隊的工作實現"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"對於開發者的開發紀律比較嚴格，對於品質保證的要求也較高。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:q,props:{id:F},children:[{type:b,tag:f,props:{href:"#flow",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"從 Master (Main) 建立一個新分支, 以特性 (Feature) 或 缺陷 (Bug) 的編號 (Issue Number) 命名該分支。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"在這個新分支上撰寫並提交程式碼。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"功能開發完成後，並自行測試通過，建立 Pull Request (簡稱 PR)"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"其他開發人員對這個 PR 進行審查 (Code Review)，確保程式碼品質沒問題後，合併回 Master (Main)"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"8-15",src:"images\u002Fcicd-2.0\u002F08\u002F8-15.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"如果 Feature 分支存在時間很短，則此模式可被認為是高頻率的 "},{type:b,tag:g,props:{},children:[{type:a,value:"主線開發，主線發布"}]},{type:a,value:" 的模式。"}]},{type:a,value:c},{type:b,tag:"hr",props:{},children:[]},{type:a,value:c},{type:b,tag:s,props:{id:"84-分支策略"},children:[{type:b,tag:f,props:{href:"#84-%E5%88%86%E6%94%AF%E7%AD%96%E7%95%A5",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:"8.4 分支策略"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"企業可以依照以下類型與條件，來確定適合團隊的分支方式"}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"開發或維護的軟體產品類型"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"發布的頻率"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"團隊成員能力"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"基礎架構的等級\n"},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"自動化測試"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"程式運行環境的管理"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"團隊紀律性"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:q,props:{id:H},children:[{type:b,tag:f,props:{href:"#841-%E7%89%88%E6%9C%AC%E7%99%BC%E5%B8%83%E6%A8%A1%E5%BC%8F",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"版本發布的基本模式有三種:"}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"專案制發布模式 ( Project Release Mode )"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"發布火車模式 ( Release Train Mode )"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"城際快線模式 ( Intercity Express Mode)"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:t,props:{},children:[{type:a,value:"專案制發布模式"}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"在軟體研發規畫中，先確認好某一版本需要的功能特性數量，只有當該次版本所需的功能全部開發完成並達到相對應的品質標準後，才能發布該版本。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"發布版本的時間間隔並沒有強制的規定，而是根據新版本要求的功能集合開發完成並達到發布標準後，對所需的時候進行評估後決定。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"此模式為最古老的發布模式，針對一個特定版本，確定了版本的功能數量與品質標準後，再估計版本交付的週期，等於先固定了功能數量與品質要求，因此團隊可能交付的時間點也就相對固定。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:S}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"可以確切知道每個版本包括哪些具體功能，有利於商業套裝軟體的銷售模式 (賣版本和授權，收取維護費用，當有心功能版本發行後，再向客戶收取新版本的升級費用。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"符合人們的安全生產習慣，也就是不能把未完成的功能帶到即將發布的版本中。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:T}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"專案交付周期較長，參與人員眾多"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"如果開發週期因為某些原因導致需求變更 (如增加需求、修改原本需求實作方式或更換需求) 時，需要重新評估專案的交付時間，會連動影響那些原本能夠如期交付的需求。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"需要等待所有需求全部實現完成後才能一起發布"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:t,props:{},children:[{type:a,value:"發布火車模式"}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"常見於大型套裝軟體。大型傳統軟體產業通常有許多產品線，各產品線之間存在非常複雜的相互依賴關係。為了能夠讓各個產品線協同發布。這些企業會為每條產品線都制定好每個版本的發布週期，也就是每個版本都像火車一樣，事先計畫好什麼時候發車。"}]},{type:a,value:c},{type:b,tag:"aside",props:{},children:[{type:a,value:"\n💡 車是按照時間發的，能趕上火車的就一起走，趕不上車的，就等下一班車。\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"geton",src:"images\u002Fcicd-2.0\u002F08\u002Fgeton.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"為了能夠準時發布，要求所有參與到該版本的開發團隊必須對齊該版本的每個開發階段。這種嚴格的時間一致性要求是因為如果該產品線的時間變更會引起其他產品線的時間變更，而這些更改也可能會影響到共享的集成測試環境的分配。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"大多數的情況下，由於計畫和各產品集成與依賴關係，因此發布火車通常以一季為單位，但不會超過 10 個月。( *Note: 本書作者以大型企業來做舉例，但 Release Train Mode 不一定依照此週期為規範。)"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"當發布火車時間表時，發布管理團隊通常與負責個產品開發的團隊進行提前溝通，討論要發布那些內容，有時甚至需要幾個月的時間，將其結論發布在企業版本表中。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:r,src:"images\u002Fcicd-2.0\u002F08\u002F8-17.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"圖 8-17 為 LiberOffice 的發布火車時間表。提前制定出時間，目的就是讓各種業務與技術部門有足夠多的時間進行計畫，以便評估出各種依賴與影響。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"制定發布計畫是一個ˊ非常正式與結構化的過程，需要有各種格式化數據以確保參加的團隊能夠對正式發布的可行性做出判斷。數據包含發布的詳細資訊( 相對標籤、名稱、部屬日期、風險級別、發布類型-企業,計畫或投資組合)、整個生命週期的各個階段及預定日期(如圖 8-18 )、每個階段要完成的活動與任務、里程碑時間、品質要求、以及管理發布火車的主要負責人。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:r,src:"images\u002Fcicd-2.0\u002F08\u002F8-18.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:S}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"對於企業來說，可以通過並行多台車的方式，將突發需求排入一台發布火車"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"用戶可以提前體驗最新版產品提供的新特性，而不必影響原本生產線上的舊版本。體驗之後在決定要不要應用於自己的生產環境中"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"即便已經決定將這個新版本用於自己的生產環境中，也可以等到新版本成熟穩定之後再這麼做"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:T}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"如果參與團隊的人數越多，溝同協調的成本會越高"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:t,props:{},children:[{type:a,value:"3 城際快線模式"}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"城際快線模式是指在發布模式三要素中，固定 "},{type:b,tag:g,props:{},children:[{type:a,value:"時間"}]},{type:a,value:" 與 "},{type:b,tag:g,props:{},children:[{type:a,value:"品質"}]},{type:a,value:" 兩個維度，且時間周期較短(一周，一天，甚至更少)，針對那些在0發布時間點已達到對應品質標準的特性進行一次發布。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"跟火車發布的區別在於兩點:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"發布周期較短，通常是兩周以內"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"負責功能開發的團隊可以自己選擇搭乘哪台城際快線，而不必在很久之前就先確定把時間確定下來。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"這種模式常見於提供網際網路服務或 SaaS 服務的軟體公司。好處在於減少了團隊之間溝通協調成本。因為每個人都知道每次發布的具體時間點，所有工作任務都可以按照這個時間點提前進行協調。而且即使功能沒有及時趕上最近一次的版本發布，團隊也能知道這個功能是否可以在下一次發布的時間進行發布。Facebook 的 Web 網站於 2013年部屬推送頻率以達到每天發布兩次，每周一次大版本。如圖 8-19 所示。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:r,src:"images\u002Fcicd-2.0\u002F08\u002F8-19.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"每個周日從主幹上拉一個發布分支，自動化測試驗證通過後，在公司內部人員開放(在公司內訪問，重定向到 latest.facebook.com)。運行過程中如果出現問題，可以在主幹上修復，然後分撿到 (CherryPick) 發布分支上。發布分支上代碼每天兩次更新到 latest.facebook.com，供公司員工內部開發使用。如果版本穩定，就對外發布，同樣是每天兩次。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"自 2017 年開始 Facebook 的發布策略已經從一天兩次的\"主幹開發，分支發布\" 改變為平均每天發布 9~10 次的 \"主幹開發，主幹發布\"模式。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"城際快線模式的優點有兩個:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"每個人都非常清楚各個時間點"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"更加聚焦生產品質"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"缺點:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"發布頻率較高，因此未完成功能的代碼也會一同發布出去"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"對於程式碼要求品質較高，需要強大的品質基礎設施保證。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"使用城際快線模式，間隔多長時間發出一趟合適? 在不影響用戶體驗，不增加成本且合規的前提下，讓發布週期盡可能縮短到令你感到有些緊張的節奏，例如:每個月發布一次版本，現在可以把兩周當作一個目標。"}]},{type:a,value:c},{type:b,tag:q,props:{id:J},children:[{type:b,tag:f,props:{href:"#842-%E5%88%86%E6%94%AF%E7%AD%96%E7%95%A5%E8%88%87%E7%99%BC%E5%B8%83%E5%91%A8%E6%9C%9F%E7%9A%84%E9%97%9C%E4%BF%82",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:K}]},{type:a,value:c},{type:b,tag:"blockquote",props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"分支策略與版本發布周期有一定的相關性"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:r,src:"images\u002Fcicd-2.0\u002F08\u002F8-20.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"分支策略與版本發布周期之间有一定的相關性，如圖 8-20 所示"}]},{type:a,value:c},{type:b,tag:m,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"軟體開發週期極長的“專案制”團隊和軟體發布頻率的極高 “城際快線模式”團隊會使用 "},{type:b,tag:g,props:{},children:[{type:a,value:"主幹開發，主幹發布"}]},{type:a,value:U}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"次之的團隊會使用 "},{type:b,tag:g,props:{},children:[{type:a,value:"主幹開發，分支發布"}]},{type:a,value:" 的策略"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"最後的區間使用 "},{type:b,tag:g,props:{},children:[{type:a,value:"分支開發，主幹發布"}]},{type:a,value:U}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"這之間不是絕對的，其中會有很大的重疊部分，通常會受到團隊成員人數，產品架構與品質保障基礎設施等影響"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:V,props:{id:L},children:[{type:b,tag:f,props:{href:"#85-%E5%B0%8F%E7%B5%90",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:N}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"每個分支策略都有其優點與挑戰。它對於發布頻率以及每次發布的效率也有較大的影響。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"目前的發展趨勢為: 軟體的發布的頻率越來越高，發布週期越來越短，矽谷頂級的網路公司大多採用 \"主幹開發\" 或者高頻的 "},{type:b,tag:g,props:{},children:[{type:a,value:"GitHub Flow"}]},{type:a,value:" 分支模式。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"一個企業到底選擇哪種分支策略，需要依據團隊的具體情況來決定。如果相對應的基礎設施不足 ( 如軟體架構、人員能力、和工具平台成熟度)，盲目地提高發布頻率，縮短發布週期會造成不必要的損失。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"“持續交付 2.0” 提倡持續極盛的分支策略，選擇分支模式的原則有以下幾項:"}]},{type:a,value:c},{type:b,tag:o,props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"分支越少越好，最好只有一條主幹"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"分支生存週期越短越好，最好在 3 天以內"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"在業務允許的條件，發布週期越短越好。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"企業管理者應該遵循 “持續交付 2.0”  的思想、理念與原則。制定合理的改善目標，促進公司 IT 交付能力不斷提升，才能夠跟上時代的發展。"}]},{type:a,value:c},{type:b,tag:V,props:{id:O},children:[{type:b,tag:f,props:{href:"#additional-reference",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:P}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F377812978",rel:[u,v,w],target:x},children:[{type:a,value:"Git 常用的分支管理模型"}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fcloud.google.com\u002Farchitecture\u002Fdevops\u002Fdevops-tech-trunk-based-development",rel:[u,v,w],target:x},children:[{type:a,value:"DevOps 技术：主干开发"}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:f,props:{href:"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F60229527",rel:[u,v,w],target:x},children:[{type:a,value:"什么是Release Train?"}]}]}]},dir:"\u002Fzh\u002Fcicd-2.0",path:"\u002Fzh\u002Fcicd-2.0\u002Fchapter8-2",extension:".md",createdAt:W,updatedAt:W,readingStats:{text:"15 min read",minutes:14.825,time:889500,words:2965},to:"\u002Fcicd-2.0\u002Fchapter8-2"},prev:{title:"Chapter 08-1 利於集成的分支策略",path:"\u002Fzh\u002Fcicd-2.0\u002Fchapter8-1",to:"\u002Fcicd-2.0\u002Fchapter8-1"},next:{title:"第2章 EndPoint設計與請求形式",path:"\u002Fzh\u002Fweb-api\u002Fchapter2",to:"\u002Fweb-api\u002Fchapter2"}}],fetch:{},mutations:[]}}("text","element","\n","p","li","a","code","true",-1,"span","icon","icon-link","ul","img","ol",3,"h3","Untitled","h1","strong","nofollow","noopener","noreferrer","_blank","Chapter 08-3 分支模式的演化 ~ 08-5","831-三駕馬車分支模式","8.3.1 三駕馬車分支模式","832--gitflow","8.3.2  GitFlow","833-githubflow","8.3.3 GitHubFlow","flow","Flow","841-版本發布模式","8.4.1 版本發布模式","842-分支策略與發布周期的關係","8.4.2 分支策略與發布周期的關係","85-小結",2,"8.5 小結","additional-reference","Additional Reference:","分支策略","Feature","Pros:","Cons:"," 的分支策略","h2","2022-05-18T14:59:31.298Z")));